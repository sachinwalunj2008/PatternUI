import React from 'react'
import {
  Title,
  Primary,
  ArgsTable,
  Stories,
  PRIMARY_STORY,
} from '@storybook/addon-docs'
import { Alert, PatternToastContainer, Tag } from '../../src/module'
import JavascriptDisplay from './JavascriptDisplay/JavascriptDisplay'

type DocsTemplateProps = {
  // Keeping both `description` and `whenToUse` as optional for now until we have all docs from UX
  /** Brief summary description of the component. */
  description?: React.ReactNode
  /** Array of strings that render as a bulleted list. Explains when to use the component. */
  whenToUse?: React.ReactNode[]
  /** Template literal for displaying the code block, especially useful for helper function definitions */
  code?: string
  /** This will display an `Alert` that let's us know if a component is a work in progress. */
  wip?: boolean
  /** This will display an `Alert` that let's us know if a component has been deprecated. */
  deprecated?: boolean
  /** Name of the replacement component to use if this component has been deprecated. This is optional as not every deprecated component will have a replacement component. */
  replacementComponent?: string
  /** Option to hide the ArgsTable. */
  noArgs?: boolean
  /** Option to hide the Primary story for the demo. */
  noDemo?: boolean
}

type DeprecatedProps = {
  /** Name of the replacement component to use if this component has been deprecated. This is optional as not every deprecated component will have a replacement component. */
  replacementComponent?: string
}

export const DocsTemplate = ({
  description,
  whenToUse,
  deprecated,
  code,
  replacementComponent,
  wip,
  noArgs,
  noDemo,
}: DocsTemplateProps): JSX.Element => {
  return (
    <>
      {/* DEPRECATION WARNING */}
      {deprecated && <Deprecated replacementComponent={replacementComponent} />}

      {/* WORK IN PROGRESS TAG */}
      {wip && <WIP />}

      {/* TITLE */}
      <div className='flex align-items-center'>
        <Title />
        {(deprecated || wip) && (
          <span className='ml-8' style={{ marginBottom: '0.5em' }}>
            {deprecated && <Tag color='red'>Deprecated</Tag>}
            {wip && <Tag color='blue'>WIP</Tag>}
          </span>
        )}
      </div>

      {/* DESCRIPTION block*/}
      <p>{description}</p>

      {/* WHEN TO USE  information block*/}
      {whenToUse && whenToUse.length && (
        <>
          <h3 className='mb-0 mt-24 fw-regular'>When to Use</h3>
          <ul>
            {whenToUse?.map((string: React.ReactNode, i: number) => (
              <li key={`li-${i}`}>{string}</li>
            ))}
          </ul>
        </>
      )}

      {/* CODE BLOCK - for example code*/}
      {!!code && (
        <>
          <div>Example Code:</div>
          <div className='mt-16 mb-24'>
            <JavascriptDisplay text={code} />
          </div>
          {!noDemo && <div>Demo:</div>}
        </>
      )}

      {/* DEFAULT STORY */}
      {!noDemo && <Primary />}

      {/* ARGS TABLE - auto generated by Storybook */}
      {!noArgs && <ArgsTable story={PRIMARY_STORY} />}

      {/* ADDITIONAL STORIES */}
      <Stories includePrimary={noDemo} />

      {/* TOAST CONTAINER */}
      <PatternToastContainer />
    </>
  )
}

const Deprecated = ({ replacementComponent }: DeprecatedProps): JSX.Element => {
  return (
    <Alert
      type='error'
      text={
        <span>
          This has been deprecated. Please do not use it.{' '}
          {replacementComponent ? (
            <span>
              We recommend that you use{' '}
              <b>
                <i>{replacementComponent}</i>
              </b>{' '}
              instead.
            </span>
          ) : (
            ''
          )}
        </span>
      }
      customClass='mb-20'
    />
  )
}

const WIP = (): JSX.Element => {
  return (
    <Alert
      type='info'
      text='This component is a Work in Progress. It should not be used.'
      customClass='mb-20'
    />
  )
}
